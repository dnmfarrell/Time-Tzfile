=pod

=encoding UTF-8

=head1 NAME

Time::Tzfile - reads a binary tzfile into a hashref

=head1 VERSION

version 0.01

=head1 SYNOPSIS

  use Time::Tzfile;

  # will get 64bit timestamps if available
  my $tzdata = Time::Tzfile->parse({filename => '/usr/share/zoneinfo/Europe/London'});

  # will always get 32bit timestamps
  my $tzdata = Time::Tzfile->parse({
    filename        => '/usr/share/zoneinfo/Europe/London',
    use_version_one => 1,
  });

=head1 METHODS

=head2 parse ({filename => /path/to/tzfile, use_version_one => 1})

The C<parse> takes a hashref containing the filename of the tzfile to open
and optionally a flag to use the version one (32bit) tzfile entry. Returns a
hashref containing the tzfile data.

Tzfiles can have two entries in them: the version one entry with 32bit timestamps
and the version two entry with 64bit timestamps. If the tzfile has the version
two entry, and if C<perl> is compiled with 64bit support, this method will
automatically return the version two entry. If you want to force the version one
entry, include the C<use_version_one> flag in the method arguments.

The hashref returned looks like this:

  {
    header         => {}, # version and counts for the body
    transitions    => [], # historical timestamps when TZ changes occur
    transition_idx => [], # index of ttinfo structs which apply to transitions
    ttinfo_structs => [], # hashrefs of gmt offset, dst flag & the tz abbrev idx
    tz_abbreviation=> $,  # scalar of tz abbreviations (GMT, BST etc)
    leap_seconds   => [], # hashrefs of the timestamp & offset to apply leap secs
    std_wall       => [], # arrayref of std wall clock indicators
    gmt_local      => [], # arrayref of gm local indicators
  }

I believe that all binary tzfiles are compiled with UTC timestamps, in which case
you can ignore C<std_wall> and C<gmt_local> entries for calculating offsets.

See L<#SYNOPSIS> for examples.

=head1 SEE ALSO

=over 4

=item * L<DateTime::TimeZone> - automatically uses text versions of the Olsen db to calculate timezone offsets

=item * L<DateTime::TimeZone::Tzfile> - applies TZ offsets from binary tzfiles to DateTime objects

=back

=head1 TZFILE FORMAT INFO

I found these resources useful guides to understanding the tzfile format

=over 4

=item * Tzfile L<manpage|http://linux.die.net/man/5/tzfile>

=item * Very useful description of tzfile format from L<Bloomberg|https://bloomberg.github.io/bde/baltzo__zoneinfobinaryreader_8h_source.html>

=item * Wikipedia L<entry|https://en.wikipedia.org/wiki/IANA_time_zone_database> on the TZ database

=back

=head1 AUTHOR

David Farrell <dfarrell@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is Copyright (c) 2016 by David Farrell.

This is free software, licensed under:

  The (two-clause) FreeBSD License

=cut
